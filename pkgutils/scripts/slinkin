#!/bin/bash
#
#  slinkin
#
#  Copyright (C) 2009 Steven J Stover <stumpy@unity-linux.org>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
# # # # # # # # # # # # # # # # # # # # # # 
#  Create links in %_topdir to svn files  #
#  $1 is package name to link into in svn #
# # # # # # # # # # # # # # # # # # # # # # 


# name of this script
myname=$(basename $0)
#
# name of the .mo file for translations
moname="pkgutils"
#
# Change svnsave if you want to save the
# settings file in a different folder
svnsave="$HOME/.svndir"
#

# This function is for giving the script i18n support.
__ () {
	local gettextopts="-d $moname -e --"
        local TEXT=`gettext $gettextopts "$1"`		# Unfortunately `` and $() remove any trailing newlines
							# so, if one is present, it must be restored.
							# Please, note that if more newlines are present
							# they will be reduced to one.
	[ "$(echo $1|grep "\\n$")" ] && TEXT="$TEXT\n"	# If $1 ends with \n append \n to TEXT
	[[ $1 = *$'\n' ]] && TEXT="$TEXT\n"		# If $1 ends with newline append \n to TEXT
	shift
	printf -- "$TEXT" "$@"
}

showhelp () {
	cat <<-EOF
$(__ "Usage: %s [OPTION]... [PKGNAME]...
Create links in SPECS and SOURCES folders to PKGNAME svn files
-or-
Unlink files in SPECS and SOURCES folders

Mandatory arguments to long options are mandatory for short options too.
  -s, --svndir=DIR    Set svn base folder
  -u, --unlink        Unlink all files in SPECS
                      and SOURCES folders
  -q, --quiet         Provide less detailed output
  -h, --help          Display this help and exit" "$myname")
	EOF

	[ -n "$1" ] && exit $1
}

fixpath () {
	echo "$1" | sed -re "s|/+|/|g" -e "s|/$||"
}

getpath () {
	# $1 is key, $2 is filename to read from
	[ -r "$2" ] && sed -n "s|^$1[ \t]*||p" "$2"
}

cfgerr () {
	cat<<-EOF
$(__ "Can't write to config file '%s'!
Please edit this script and change the value of
variable '%s' to a file which you have
write permissions to, e.g. '%s'
(Script is located at '%s')" "${!1}" "$1" "$HOME/${!1##*/}" "$0")
	EOF
	exit 1
}

savepath () {
	# $1 is key, $2 is value, $3 is  var name of filename to write to
	sed -i "\|^$1|d" "${!3}" 2>/dev/null
	echo "$1	$2" 2>/dev/null >>"${!3}" || cfgerr "$3"
}

vareval () {
	local a e n f="$1"
	if [[ "$f" =~ [$] ]]; then
		a=( $(echo "$f"|cut --output-delimiter=" " -d"/" -f1-) )
		for n in ${!a[@]}; do
			if [ "${a[n]:0:1}" = "$" ]; then
				e=${a[n]#$} ; a[n]=${!e}
			fi
		done
		f=$(echo ${a[@]} | sed "s| |/|g")
	fi
	fixpath "$f"
}

getsvn () {
	# $1 is svn or altsvn
	local v="$1" svn=$(getpath "$1" "$svnsave")
	if [ -z "$svn" ]; then
		if ! $quiet; then
			read -p "$(__ "Please enter full path to %s base folder: " "${1/alt/alternate }")" svn
			if [ -z "$svn" ]; then
				__ "Nothing entered, quitting...\n"
				exit 1
			fi
		else
			__ "Please change the %s base folder with the -s option\nQuitting...\n" "${1/alt/alternate }"
			exit 1
		fi
	fi
	# If svn contains "$" evaluate it as a variable
	svn=$(vareval "$svn")
	savepath "$1" "$svn" "svnsave"
	[ "$v" = "svn" ] && v="svndir"
	eval $v="$svn"
	! $quiet && __ "Using %s base folder '%s'\n" "${1/alt/alternate }" "$svn" && echo
}

missing () {
	__ "Missing %s folder\n" "$1"
}

lnkerr () {
	echo "$1" | sed -n "s|^.*\(\`.*'\).*\(\`.*'\).*\(:.*\)$|\1\3|p" | sed "s|\`|'|"
}

linkit () {
	local m
	local n=$(/bin/ls -1 "$1" | wc -l)
	if [ $n -ne 0 ]; then
		o=( $(ln -s ${1}* $2 2>&1) )
		[ $? -eq 0 ] && (( count+=n ))
		for m in ${o[@]}
			do lnkerr "$m"
		done
	else
		__ "Skipping empty folder '%s'\n" "$1"
	fi
}

dolinks () {
	name="$1"
	svnF="$svndir/$name/F/"
	svnP="$svndir/$name/P/"
	svnS="$svndir/$name/S/"

	echo -e "\nCreating links for '$name' in '$topdir'"
	IFS=$NL ; count=0
	[ -d "$svnF" ] && linkit $svnF $specs || missing "SPEC"
	[ -d "$svnP" ] && linkit $svnP $sources || missing "PATCH"
	[ -d "$svnS" ] && linkit $svnS $sources || missing "SOURCE"
	IFS=$OFS
	[ "$count" -gt 0 ] && __ "Created %s links\n" "$count"
}

gounlink () {
	IFS=$NL
	if [ -d "$1" ]; then
		cd "$1"
		__ "Unlinking files in '%s'\n" "$1"
		for a in $(/bin/ls -1)
		do 	[ -L "$a" ] && unlink "$a"
		done
	else
		__ "Missing "
		case "$1" in
			$sources) echo -n "SOURCES";;
			$specs) echo -n "SPECS";;
		esac
		__ " folder '%s'\n" "$1"
	fi
	IFS=$OFS
}

# # # # # # # # # # # # # #
#  Execution starts here  #
# # # # # # # # # # # # # #

rpmmac="$HOME/.rpmmacros"
NL=$'\012' ; quiet=false ; dounlink=false ; dohelp=false

OFS=$IFS ; IFS=$NL
set - $(echo "$*" | sed -e "s|--svndir=|-s|g" -e "s|--unlink|-u|g" -e "s|--quiet|-q|g" -e "s|--help|-h|g")
IFS=$OFS

while getopts s:quh op
do
	case "$op" in
		s) svndir=$(fixpath "$OPTARG");;
		q) quiet=true;;
		u) dounlink=true;;
		h) dohelp=true;;
		?) exit 1;;
	esac
done
shift $(( $OPTIND-1 ))

$dohelp && showhelp 0

if [ -n "$svndir" ]; then
	savepath "svn" "$svndir" "svnsave"
	__ "Svn base folder changed to '%s'\n" "$svndir"
else
	getsvn "svn"
fi

if [ ! -r "$rpmmac" ]; then
	cat<<-EOF
$(__ "Can't read '%s' macros file. Please make sure
you have '%s' with %%_topdir macro defined.
Quitting..." "$rpmmac" "$rpmmac")
	EOF
	exit 1
fi

topdir=$(rpm -E %_topdir)
touch $topdir/$myname.$$ 2>/dev/null
e=$? ; rm -f $topdir/$myname.$$
if [ "$e" -ne 0 ]; then
	cat<<-EOF
$(__ "Can't write to '%s'. Please check the
%%_topdir macro in '%s'.
Quitting..." "$topdir" "$rpmmac")
	EOF
	exit 1
fi

sources="$topdir/SOURCES/"
specs="$topdir/SPECS/"

uname -m | grep -q "i[3456]86" && dir86="i586" || dir86="x86_64"
mkdir -p $topdir/{BUILD,RPMS/$dir86,SOURCES,SPECS,SRPMS}
pushd $topdir/RPMS &>/dev/null
[ -d "noarch" ] || ln -sf ${topdir}/RPMS/$dir86 noarch
popd &>/dev/null

if $dounlink; then
	gounlink "$sources"
	gounlink "$specs"
fi

while [ "$#" -gt 0 ]
do
	dolinks "$1"
	shift
done
