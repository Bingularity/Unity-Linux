#!/bin/bash

# name of this script
myname=$(basename $0)
#
# name of the .mo file for translations
moname="pkgutils"
#

# This function is for giving the script i18n support.
__ () {
	local gettextopts="-d $moname -e --"
        local TEXT=`gettext $gettextopts "$1"`		# Unfortunately `` and $() remove any trailing newlines
							# so, if one is present, it must be restored.
							# Please, note that if more newlines are present
							# they will be reduced to one.
	[ "$(echo $1|grep "\\n$")" ] && TEXT="$TEXT\n"	# If $1 ends with \n append \n to TEXT
	[[ $1 = *$'\n' ]] && TEXT="$TEXT\n"		# If $1 ends with newline append \n to TEXT
	shift
	printf -- "$TEXT" "$@"
}

# At some points, the script relies on the output of other programs such as smart.
# We can't rely on the English version of their messages, because, depending on the system, those
# messages might be translated into the system locale. This function retrieves the translated 
# version of a given message $2 (if such translation exists) for the program $1.
fetchmsg() {
	local gettextopts="-d $1 -e --"
	shift
        local TEXT=`gettext $gettextopts "$1"`
	shift
	printf -- "$TEXT" "$@" | head -n 1 # Always extract the first line from multi-line messages
}

showhelp () {
	cat<<-EOF
$(__ "Usage: %s [FILE]...

Remove packages listed in FILE, where FILE
is a file generated by the saddpkg script
\"Save list of files\" option." "$myname")
	EOF
	exit $1
}

yorn () {
	local s
	while ! [[ "$s" =~ [ynYN] ]]; do
		read -p"$2" s
		s=${s:-$1}
		[ ${#s} -gt 1 ] && s=
	done
	echo -n $s|tr yn YN
}

addfile () {
	local F P
	F=($(sed -n '/^Installing/,/^$/ {
		/^  /p
		}' "$1"))

	for P in ${F[@]}; do
		A[$C]=$P
		(( C++ ))
		# L gets length of longest name
		[ ${#P} -gt $L ] && L=${#P}
	done
}

showlist () {
	local C F N=0
	(( L+=2 ))					# longest name plus two blanks
	(( C=$(tput cols)/L ))		# number of L-width columns in current term
	[ $C -lt 1 ] && C=1			# not less than 1 column
	[ $C -gt 4 ] && C=4			# nor more than 4 columns
	for F in ${A[@]}; do
		printf "%-${L}s" "$F"
		(( N++ ))
		if [ $N -eq $C ]; then
			N=0 ; echo
		fi
	done
	echo ; [ $N -gt 0 ] && echo
}


# # # # # # # # # # # # # #
#  Execution starts here  #
# # # # # # # # # # # # # #

[ $# -eq 0 ] && showhelp

set - $(echo "$*" | sed -e "s|--help|-h|g")

while getopts h OP; do
	case $OP in
		h|?) HELPME=1;;
	esac
done
shift $(( $OPTIND-1 ))

[ -n "$HELPME" ] && showhelp

declare -a A
C=0 ; L=0
while [ $# -gt 0 ]; do
	addfile "$1"
	shift
done

if [ $C -eq 0 ]; then
	__ "No packages found, check your input file(s).\n"
	showhelp 1
fi

__ "Removing packages (%s):\n" "$C"
showlist

if [ "$(yorn y "$(__ "Are you sure? %s" "[Y/n] ")")" = "Y" ]; then
	tmpfil="/tmp/${myname}.$$"
	touch "$tmpfil" ; err=$? ; rm -f "$tmpfil"
	if [ "$err" -ne 0 ]; then
		__ "Can't create tmp file '%s', quitting.\n" "$tmpfil"
		exit 1
	fi

	cat>"$tmpfil"<<-EOF
	#!/bin/sh
	echo -n "${A[@]}" | xargs smart remove -y
	EOF

	chmod +x "$tmpfil"

	__ "Please enter root "
	su -c "$tmpfil"
	rm -f "$tmpfil"
else
	__ "Operation aborted.\n"
fi
