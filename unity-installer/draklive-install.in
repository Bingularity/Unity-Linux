#!/usr/bin/perl

# Must be done as early as possible to avoid issues when displaying translated
# strings
BEGIN {
    push @::textdomains, 'draklive-install';
}

use lib qw(/usr/lib/libDrakX);
use standalone;
use interactive;
use fs;
use fs::any;
use fs::type;
use fs::partitioning;
use fs::partitioning_wizard;
use partition_table;
use MDK::Common;
use common;
use feature qw(state);

{
    use diskdrake::interactive;
    package diskdrake::interactive;
    my $old = \&hd_possible_actions;
    undef *hd_possible_actions;
    *hd_possible_actions = sub {
        #- for the partition wizard to show the auto-allocate option
        local $::isInstall = 1;
        &$old;
    };
    undef *Done;
    #- skip the fstab/reboot checks
    *Done = \&diskdrake_interactive_Done;
    #- don't ask whether to Move/Hide old files
    undef *need_migration;
    *need_migration = sub { 'hide' };
}

install_live();

sub install_live() {
    my $in = 'interactive'->vnew('su');
    $in->{pop_wait_messages} = 0;

    $::isWizard = 1;
    $::Wizard_no_previous = 1;
    $::Wizard_pix_up = "Unity-wizard";

    my $all_hds = {};

# update fstab hds  UUID for Unity 
    system("/usr/sbin/drakupdate_fstab --verbose --auto --del '$all_hds'");
    system("/usr/sbin/drakupdate_fstab --verbose --auto --add '$all_hds'");

    my $fstab = [];
    $::prefix = '/mnt/install';

    my $system_file = '/etc/sysconfig/draklive-install';
    my %settings = getVarsFromSh($system_file);

    my $copy_source = $settings{SOURCE} || '/union';
    my $live_media = '/union';

    display_start_message($in);
    init_hds($in, $all_hds, $fstab, $live_media);
    ask_partitions_loop($in, $all_hds, $fstab, $copy_source);
    if ($usegtk2) {
        remove_unused_packages($in, $copy_source);
    }
    prepare_root($in, $all_hds);
    copy_root($in, $copy_source);
    complete_install($in, $all_hds);
    setup_bootloader($in, $all_hds, $fstab);
    finish_installation($fstab);
    display_end_message($in);
    $in->exit(0);
}

sub umount_all {
    my ($fstab) = @_;
    #- make sure nothing is mounted in the new root
    foreach (sort { $b cmp $a } grep { /^$::prefix/ } map { (split)[1] } cat_('/proc/mounts')) {
        system('umount', $_);
    }
    #- make sure selected devices aren't mounted, and swap isn't used
    foreach (grep { isSwap($_) } @$fstab) {
        eval { fs::mount::swapoff($_->{device}) };
    }
    foreach (map { $_->{mntpoint} && !isSwap($_) ? "/dev/$_->{device}" : () } @$fstab) {
        system('umount', $_);
    }
}

sub on_reboot_needed {
    my ($in) = @_;
    fs::partitioning_wizard::warn_reboot_needed($in);
    $in->exit(0);
}

sub display_start_message() {
    my ($in) = @_;

    my $title = N("Unity Installer");
    my $message = N("This wizard will help you to install the live distribution.");

    if (check_for_xserver()) {
        require ugtk2;
        ugtk2->import(qw(:helpers :wrappers :create));
        require mygtk2;
        mygtk2->import(qw(gtknew));

        my $w = ugtk2->new($title);
        my $window = $w->{window};
        $::main_window = $w->{real_window};

        $window->signal_connect(delete_event => sub { ugkt2->exit(0) });
        unless ($::isEmbedded) {
            $window->set_border_width(2);
            ### menus definition
            # the menus are not shown but they provides shiny shortcut like C-q
            my @menu_items = ([ N("/_File"), undef, undef, undef, '<Branch>' ],
                [ N("/File/_Quit"), N("<control>Q"), sub { ugtk2->exit(0) }, undef, '<Item>' ],
            );
            create_factory_menu($w->{rwindow}, @menu_items);
            ######### menus end
        }
        gtkadd($window, 
            gtknew('VBox', 
                children => [
                    1,
                    gtkcreate_img("Unity-wizard"),
                    1,
                    gtknew('Label', height => 5),
                    1,
                    $message,
                    0, 
                    create_okcancel( { cancel_clicked => sub { ugtk2->exit(0)} }), 
                ],
            )
        );

        $window->show_all;
        gtkflush();
        $w->main;
    } else {
        $in->ask_okcancel($title, $message) or $in->exit;
    }
}

sub umount_first_pass() {
    local $::prefix = undef;
    my $all_hds = fsedit::get_hds();
    fs::get_raw_hds('', $all_hds);
    fs::get_info_from_fstab($all_hds);
    my $fstab = [ fs::get::fstab($all_hds) ];
    fs::merge_info_from_mtab($fstab);

    #- inlined from fs::mount::umount_all to go on when one umount fail
    #- (maybe the sort function could be shared)
    log::l("unmounting all filesystems");
    foreach (sort { $b->{mntpoint} cmp $a->{mntpoint} } 
        grep { $_->{mntpoint} && !$_->{real_mntpoint} } @$fstab) {
        eval { fs::mount::umount_part($_) };
        log::l("error unmounting $_->{mntpoint}: $@") if $@;
    }
}

sub init_hds {
    my ($in, $all_hds, $fstab, $live_media) = @_;
    my $wait = $in->wait_message('', ''); #N("Please wait"));
    umount_first_pass();
    eval { fs::any::get_hds($all_hds, $fstab, [], {}, 'skip_mtab', $in) };

    #- fs::any::get_hds does not return mounts that are not in fstab
    my @mounted = fs::read_fstab('', '/proc/mounts');
    my $live_part = find { $_->{mntpoint} eq $live_media } @mounted;
    my $live_device = $live_part && $live_part->{device};
    #- remove live device from the detected hds, so that bootloader is not installed on it:
    #-  bootloader installation uses first device from detect_devices::get, which tries to list devices
    #-  by booting order, and our live system is likely to be here in first position
    @{$all_hds->{hds}} = grep {
        !member($live_device, map { $_->{device} } partition_table::get_normal_parts_and_holes($_));
    } @{$all_hds->{hds}} if $live_device;

    my $err = $@;
    umount_all($fstab);
    if ($err) {
        undef $wait;
        $in->ask_warn(N("Error"), [ formatError($err) ]);
        $in->exit(1);
    }
}

sub ask_partitions_loop {
    my ($in, $all_hds, $fstab, $copy_source) = @_;

    while (1) {
        eval { ask_partitions($in, $all_hds, $fstab, $copy_source) };
        my $err = $@ or last;
        $in->exit(1) if $err =~ /wizcancel/ ||
        !$in->ask_warn(N("Error"), [ N("An error occurred"), formatError($err) ]);
    }
}

sub ask_partitions {
    my ($in, $all_hds, $fstab, $copy_source) = @_;
    fs::partitioning_wizard::main($in, $all_hds, $fstab, [], undef, {}, 'skip_mtab');

    mkdir_p($::prefix) or die "unable to create $::prefix";

    fs::any::write_hds($all_hds, $fstab, undef, sub { on_reboot_needed($in) }, {});
    fs::any::check_hds_boot_and_root($all_hds, $fstab);
    fs::partitioning::choose_partitions_to_format($in, $fstab);

    my $total = get_total_size($in, $copy_source);
    my $available = fs::any::getAvailableSpace($fstab, 'skip_mounted');
    die N("Not enough space available (%s available while %s are needed)",
        formatXiB($available), formatXiB($total)) . "\n"
    if $total > $available;

    umount_all($fstab);
    fs::partitioning::format_mount_partitions($in, $all_hds, $fstab);
}

sub remove_unused_packages {
    my ($in, $o_prefix) = @_;
    require pkgs;
    #in remove_unused_packages, we want to get the locale from the currently
    #running system, but we want to remove unused packages from the 
    #system based in $o_prefix, that's why we use an extra arg instead of 
    #directly using $::prefix
    local $::prefix;
    pkgs::remove_unused_packages($in, $in->do_pkgs, $o_prefix);
}

sub prepare_root {
    my ($in, $all_hds) = @_;
    #- create required directories and devices (early to have a consistent root before calling other programs)
    my $_wait = $in->wait_message('', ''); #N("Please wait"));
    fs::any::prepare_minimal_root($all_hds);
    run_program::run('makedev', $::prefix . '/dev');
}

sub build_copy_command {
    my ($source, $dest) = @_;
    join(' ',
        'tar', 'c', '--exclude=/mnt', '--exclude=/live', '--exclude=/proc', '--exclude=/dev', '--exclude=/sys', '--one-file-system', '-C', $source, '.',
        '|', 
        'tar', 'xvv', '-C', $dest,
    );
}

sub get_total_size {
    my ($in, $source) = @_;
    state %total;
    return $total{$source} if $total{$source};
    my $_wait = $in->wait_message('', N("Computing total size"));
    $total{$source} = first(split(/\s+/, `du -sbx $source 2>/dev/null`));
}

sub sync_logs() {
    cp_af('/var/log', $::prefix . '/var');
}

sub copy_root {
    my ($in, $copy_source) = @_;
    my $total = get_total_size($in, $copy_source);
    my ($_w, $wait_message) = $in->wait_message_with_progress_bar();

    open(my $OUTPUT, '-|', build_copy_command($copy_source, $::prefix));
    {
        local $_;
        my $current = my $previous = 0;
        while (<$OUTPUT>) {
            (undef, undef, my $size) = split;
            $current += $size;
            if ($current <= $total && $current/$total > $previous/$total + 0.001) {
                $wait_message->('Copying in Progress', $current, $total);
                $previous = $current;
            }
        }
    }
    if (!close($OUTPUT)) {
        $in->ask_warn(N("Error"), N("Unable to copy files to new root"));
        $in->exit(1);
    }
    sync_logs();
}

sub clean_harddrake_hds {
    my ($prefix) = @_;
    #- remove harddisks from harddrake's config file, so that hardddisks
    #- are automatically rediscovered at first boot
    require Storable;
    my $harddrake_file = $prefix . "/etc/sysconfig/harddrake2/previous_hw";
    my $harddrake_conf = eval { Storable::retrieve($harddrake_file) };
    if ($harddrake_conf) {
        delete $harddrake_conf->{HARDDISK};
        Storable::store($harddrake_conf, $harddrake_file);
    }
}


sub complete_install {
    my ($in, $all_hds) = @_;
    my $_wait = $in->wait_message('', ''); #N("Please wait"));

    my $real_rpm_dir = "/tmp/rpm/real";
    cp_f(glob($real_rpm_dir . "/*"), $::prefix . "/var/lib/rpm") if -d $real_rpm_dir;

    #- FIXME: maybe factorize with draklive, using draklive --clean-chroot ?
    #- remove unwanted files and packages
    my $live_user = chomp_(cat_('/etc/draklive-install.d/user'));
    my $live_user_desktop = $live_user && chomp_(run_program::rooted_get_stdout($::prefix, "su - $live_user -c 'xdg-user-dir DESKTOP'"));
    unlink(map { $::prefix . $_ } '/.autofsck',
        chomp_(cat_(glob('/etc/draklive-install.d/remove.d/*'))),
        if_($live_user_desktop,
            $live_user_desktop . '/draklive-copy-wizard.desktop',
            $live_user_desktop . '/draklive-install.desktop'),
    );
    {
        #- do not allow update-menus to create home directory with invalid perms
        local $ENV{HOME} = '/root';
#        system('chroot', $::prefix, 'rpm', '-e', 'draklive-install');
    }

    #- copy sysconfig files for first boot
    cp_f(glob('/etc/draklive-install.d/sysconfig/*'), $::prefix . '/etc/sysconfig');

    #- allow mdkonline to be started again
#    eval { rm_rf($::prefix . '/etc/skel/.MdkOnline', glob($::prefix . '/home/*/.MdkOnline')) };

    #- unselect live user in kdm
    my $kdm_cfg = '/etc/kde/kdm/kdmrc';
    update_gnomekderc($::prefix . $kdm_cfg,
        'X-:0-Greeter' => (PreselectUser => 'None', DefaultUser => '')) if -f $kdm_cfg;
    #disable autologin since it pulls xdm and we don't want that
    #any::set_autologin($in->do_pkgs, undef);

    #- allow to install doc in disk install
    substInFile { undef $_ if /^\%_excludedocs/ } $::prefix . '/etc/rpm/macros';

    fs::write_fstab($all_hds, $::prefix);

    clean_harddrake_hds($::prefix);

    # enable back some disabled services
    require services;
    services::start_service_on_boot($_) foreach qw(dkms anacron atd crond syslog);
    sync_logs();
}

sub setup_bootloader {
    my ($in, $all_hds, $fstab) = @_;
    use bootloader;
    my $bootloader = {};
    any::setupBootloaderBeforeStandalone($in->do_pkgs, $bootloader, $all_hds, $fstab);
    local $::Wizard_no_previous = 0;
    any::setupBootloaderUntilInstalled($in, $bootloader, $all_hds, $fstab, $ENV{SECURE_LEVEL});
    sync_logs();
}

sub clean_live_system_hds() {
    #- clean fstab and harddrake config in the live system
    #- since partitions UUIDs of the installed system have been modified
    #- (useful for persistent live systems)
    local $::prefix = undef;
    clean_harddrake_hds($::prefix);
    my $all_hds = fs::get::empty_all_hds(); #- skip real harddisks
    fs::get_raw_hds('', $all_hds);
    fs::get_info_from_fstab($all_hds);
    fs::write_fstab($all_hds, $::prefix);
}

sub finish_installation {
    my ($fstab) = @_;
    sync_logs();
    #- cleanly umount here, it will avoid fs journals to be corrupted after a hackish reboot


#Get Kernel Information
    my $kernelver = qx(uname -r);
    chomp($kernelver);
    my $kernel = "/boot/vmlinuz-".$kernelver;
    my $initrd = "/boot/initrd-".$kernelver.".img";

### here are the new modifications

###my @satalist = qw(libata sd_mod ata_piix scsi_mod sr_mod sg a100u2w advansys aha152x aha1542 aic7xxx BusLogic fdomain gdth ahci sata_qstor sata_sil24 sata_sis sata_sx4 sata_uli sx8 megaraid sata_nv sata_promise sata_sil sata_svw sata_via sata_vsc scsi_transport_spi 3w-xxxx);

#  Check for SATA
###my $loaded = `lsmod`;
    my $with = '';
###my $sata = '';


###foreach $sata (@satalist) {
###    if (index($loaded, $sata) ne "-1") {
###        $with = "$with"." --with $sata";
###        }
###    }


#Establish chroot environment
#system("mount -t proc none $::prefix/proc");
    system("mount -t none /dev $::prefix/dev -o bind");

# Truly enable dkms
    system("chroot $::prefix /bin/sed -i 's%no%yes%g' /usr/src/*/dkms.conf");
    system("chroot $::prefix /usr/sbin/dkms_autoinstaller stop");

# Remove old initrd 
    system("chroot $::prefix rm -f $initrd");

# Make new initrd
    system("chroot $::prefix /sbin/mkinitrd $usbcrap $with $initrd $kernelver");
    system("chroot $::prefix ln -s  $initrd /boot/initrd.img");

# Regenerate bootsplash for initrd
    system("chroot $::prefix /usr/share/bootsplash/scripts/make-boot-splash $initrd 800x600");


# re-establish original inittab otherwise system wont boot in read/write mode
    system("cp -a /live/etc/inittab $::prefix/etc/");

# Touch halt file
    system("chroot $::prefix touch halt");

# Unity revert changes made by rc.sysinit on installed system
    system("mv -f $::prefix/etc/rc.d/init.d/halt.livecd $::prefix/etc/rc.d/init.d/halt");
    system("mv -f $::prefix/etc/rc.d/init.d/netfs.livecd $::prefix/etc/rc.d/init.d/netfs");
    system("mv -f $::prefix/etc/sysconfig/network.livecd $::prefix/etc/sysconfig/network") if (-e "$::prefix/etc/sysconfig/network.livecd");
#system("rename .livecd '' $::prefix/etc/sysconfig/network-scripts/ifcfg-eth*.livecd");
    system("rm -f $::prefix/etc/sysconfig/network-scripts/ifcfg-eth*.livecd");
    system("mkdir -p $::prefix/media");
    system("chmod 777 $::prefix/tmp");
    system("chmod +t $::prefix/tmp");

# Unity Specific
    system("echo -e 'none /dev/pts devpts mode=0620 0 0' >>$::prefix/etc/fstab");
    system("mv -f $::prefix/usr/lib/libDrakX/bootloader.pm.orig $::prefix/usr/lib/libDrakX/bootloader.pm") if (-e "$::prefix/usr/lib/libDrakX/bootloader.pm.orig");

# Automatically delete the guest account on first boot
    system("chroot $::prefix touch /etc/delete-guest-account");

# Save alsa sound
    system("chroot $::prefix /usr/sbin/alsactl store");

# Unity grub menu.lst
#system("perl -pi -e 's/title linux/title Unity/gi' $::prefix/boot/grub/menu.lst");
#system("perl -pi -e 's/title failsafe/title Unity-failsafe/gi' $::prefix/boot/grub/menu.lst");

# Setup for root password and create new user at 1st boot
    system("rm -f $::prefix/etc/sysconfig/finish-install");
    system("touch $::prefix/etc/sysconfig/finish-install");

    open FINISH, '>', "$::prefix/etc/sysconfig/finish-install";
    print FINISH "FINISH_INSTALL=@FINISH_INSTALL@\n";
    print FINISH "LICENSE=@LICENSE@\n";
    print FINISH "LANGUAGE=@LANGUAGE@\n";
    print FINISH "KEYBOARD=@KEYBOARD@\n";
    print FINISH "COUNTRY=@COUNTRY@\n";
    print FINISH "TIMEZONE=@TIMEZONE@\n";
    print FINISH "NETWORK=@NETWORK@\n";
    print FINISH "AUTHENTICATION=@AUTHENTICATION@\n";
    print FINISH "USERS=@USERS@\n";
    print FINISH "USER_AUTOLOGIN_FIRST=@USER_AUTOLOGIN_FIRST@\n";
    print FINISH "GLX=@GLX@\n";
    print FINISH "SMART=@SMART@\n";
    close FINISH;

    system("umount $::prefix/dev");
#system("umount $::prefix/proc");

    umount_all($fstab);
    clean_live_system_hds();
}

sub display_end_message {
    my ($in) = @_;
    $::Wizard_finished = 1;
    $in->ask_okcancel(N("Congratulations"), N("Please halt your computer, remove your live system, and restart your computer."));
}

###
### duplicate code
###

#- from disdrake::interactive
{
    package diskdrake::interactive;
    sub diskdrake_interactive_Done {
        my ($in, $all_hds) = @_;
        eval { raid::verify($all_hds->{raids}) };
        if (my $err = $@) {
            $::expert or die;
            $in->ask_okcancel('', [ formatError($err), N("Continue anyway?") ]) or return;
        }
        foreach (@{$all_hds->{hds}}) {
            if (!write_partitions($in, $_, 'skip_check_rebootNeeded')) {
                return if !$::isStandalone;
                $in->ask_yesorno(N("Quit without saving"), N("Quit without writing the partition table?"), 1) or return;
            }
        }
        #- skip that fstab/reboot steps
        if (!$::isInstall && 0) { 
            my $new = fs::fstab_to_string($all_hds);
            if ($new ne $all_hds->{current_fstab} && $in->ask_yesorno('', N("Do you want to save /etc/fstab modifications"), 1)) {
                $all_hds->{current_fstab} = $new;
                fs::write_fstab($all_hds);
            }
            update_bootloader_for_renumbered_partitions($in, $all_hds);

            if (any { $_->{rebootNeeded} } @{$all_hds->{hds}}) {
                $in->ask_warn('', N("You need to reboot for the partition table modifications to take place"));
                tell_wm_and_reboot();
            }
        }
        if (my $part = find { $_->{mntpoint} && !maybeFormatted($_) } fs::get::fstab($all_hds)) {
            $in->ask_okcancel('', N("You should format partition %s.
Otherwise no entry for mount point %s will be written in fstab.
Quit anyway?", $part->{device}, $part->{mntpoint})) or return if $::isStandalone && 0; #- no, please
        }
        1;
    }
}

